#pragma checksum "C:\Users\PALBOTICS\Google Drive\Symbio\Code\Desktop\Windows\Windows 10\Multiporter\MultiporterC\Explorer.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "40A9D6F90712EBA37E4104F80317616C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiporterC
{
    partial class Explorer : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_FrameworkElement_DataContext(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.DataContext = value;
            }
            public static void Set_Windows_UI_Xaml_FrameworkElement_Tag(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Tag = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_WinRTXamlToolkit_Controls_DataVisualization_Charting_Chart_Title(global::WinRTXamlToolkit.Controls.DataVisualization.Charting.Chart obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Title = value;
            }
            public static void Set_WinRTXamlToolkit_Controls_DataVisualization_Charting_DataPointSeries_ItemsSource(global::WinRTXamlToolkit.Controls.DataVisualization.Charting.DataPointSeries obj, global::System.Collections.IEnumerable value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.IEnumerable) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.IEnumerable), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_Foreground(global::Windows.UI.Xaml.Controls.Control obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
        };

        private class Explorer_obj1_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IExplorer_Bindings
        {
            private global::MultiporterC.DataChartNode dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj2;
            private global::WinRTXamlToolkit.Controls.DataVisualization.Charting.Chart obj3;
            private global::WinRTXamlToolkit.Controls.DataVisualization.Charting.LineSeries obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;
            private global::Windows.UI.Xaml.Controls.Button obj7;

            private Explorer_obj1_BindingsTracking bindingsTracking;

            public Explorer_obj1_Bindings()
            {
                this.bindingsTracking = new Explorer_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 3:
                        this.obj3 = (global::WinRTXamlToolkit.Controls.DataVisualization.Charting.Chart)target;
                        break;
                    case 4:
                        this.obj4 = (global::WinRTXamlToolkit.Controls.DataVisualization.Charting.LineSeries)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MultiporterC.DataChartNode data = args.NewValue as global::MultiporterC.DataChartNode;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MultiporterC.DataChartNode was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MultiporterC.DataChartNode);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Border)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MultiporterC.DataChartNode) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IExplorer_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Explorer_obj1_Bindings

            public void SetDataRoot(global::MultiporterC.DataChartNode newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MultiporterC.DataChartNode obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_X_Axis_Name(obj.X_Axis_Name, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Data(obj.Data, phase);
                        this.Update_Y_Axis_Name(obj.Y_Axis_Name, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_DataContext(this.obj3, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_DataContext(this.obj4, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj7, obj, null);
                }
            }
            private void Update_X_Axis_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj2, obj, null);
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_WinRTXamlToolkit_Controls_DataVisualization_Charting_Chart_Title(this.obj3, obj, null);
                }
            }
            private void Update_Data(global::System.Collections.Generic.List<global::MultiporterC.DataPoint> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRTXamlToolkit_Controls_DataVisualization_Charting_DataPointSeries_ItemsSource(this.obj4, obj, null);
                }
            }
            private void Update_Y_Axis_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                }
            }

            private class Explorer_obj1_BindingsTracking
            {
                global::System.WeakReference<Explorer_obj1_Bindings> WeakRefToBindingObj; 

                public Explorer_obj1_BindingsTracking(Explorer_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Explorer_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Explorer_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MultiporterC.DataChartNode obj = sender as global::MultiporterC.DataChartNode;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_X_Axis_Name(obj.X_Axis_Name, DATA_CHANGED);
                                    bindings.Update_Data(obj.Data, DATA_CHANGED);
                                    bindings.Update_Y_Axis_Name(obj.Y_Axis_Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "X_Axis_Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_X_Axis_Name(obj.X_Axis_Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Data":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Data(obj.Data, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Y_Axis_Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Y_Axis_Name(obj.Y_Axis_Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MultiporterC.DataChartNode obj)
                {
                    Explorer_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class Explorer_obj8_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IExplorer_Bindings
        {
            private global::MultiporterC.QuantitativeRelationshipNode dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.Image obj10;
            private global::Windows.UI.Xaml.Controls.Button obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.Button obj17;

            private Explorer_obj8_BindingsTracking bindingsTracking;

            public Explorer_obj8_Bindings()
            {
                this.bindingsTracking = new Explorer_obj8_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MultiporterC.QuantitativeRelationshipNode data = args.NewValue as global::MultiporterC.QuantitativeRelationshipNode;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MultiporterC.QuantitativeRelationshipNode was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MultiporterC.QuantitativeRelationshipNode);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Border)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MultiporterC.QuantitativeRelationshipNode) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IExplorer_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Explorer_obj8_Bindings

            public void SetDataRoot(global::MultiporterC.QuantitativeRelationshipNode newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MultiporterC.QuantitativeRelationshipNode obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Definition(obj.Definition, phase);
                        this.Update_DefinitionVisibility(obj.DefinitionVisibility, phase);
                        this.Update_ImageVisible(obj.ImageVisible, phase);
                        this.Update_SubtypeEnabled(obj.SubtypeEnabled, phase);
                        this.Update_SubtypeString(obj.SubtypeString, phase);
                        this.Update_TypeString(obj.TypeString, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_Definition(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                }
            }
            private void Update_DefinitionVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, obj);
                }
            }
            private void Update_ImageVisible(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, obj);
                }
            }
            private void Update_SubtypeEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj11, obj);
                }
            }
            private void Update_SubtypeString(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                }
            }
            private void Update_TypeString(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                }
            }
            private void Update_Description(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj17, obj, null);
                }
            }

            private class Explorer_obj8_BindingsTracking
            {
                global::System.WeakReference<Explorer_obj8_Bindings> WeakRefToBindingObj; 

                public Explorer_obj8_BindingsTracking(Explorer_obj8_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Explorer_obj8_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Explorer_obj8_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MultiporterC.QuantitativeRelationshipNode obj = sender as global::MultiporterC.QuantitativeRelationshipNode;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Definition(obj.Definition, DATA_CHANGED);
                                    bindings.Update_DefinitionVisibility(obj.DefinitionVisibility, DATA_CHANGED);
                                    bindings.Update_ImageVisible(obj.ImageVisible, DATA_CHANGED);
                                    bindings.Update_SubtypeEnabled(obj.SubtypeEnabled, DATA_CHANGED);
                                    bindings.Update_SubtypeString(obj.SubtypeString, DATA_CHANGED);
                                    bindings.Update_TypeString(obj.TypeString, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Definition":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Definition(obj.Definition, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DefinitionVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DefinitionVisibility(obj.DefinitionVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ImageVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ImageVisible(obj.ImageVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SubtypeEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SubtypeEnabled(obj.SubtypeEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SubtypeString":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SubtypeString(obj.SubtypeString, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TypeString":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TypeString(obj.TypeString, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MultiporterC.QuantitativeRelationshipNode obj)
                {
                    Explorer_obj8_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class Explorer_obj19_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IExplorer_Bindings
        {
            private global::MultiporterC.VariableNode dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Button obj20;
            private global::Windows.UI.Xaml.Controls.Button obj21;
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;

            private Explorer_obj19_BindingsTracking bindingsTracking;

            public Explorer_obj19_Bindings()
            {
                this.bindingsTracking = new Explorer_obj19_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 20:
                        this.obj20 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 21:
                        this.obj21 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MultiporterC.VariableNode data = args.NewValue as global::MultiporterC.VariableNode;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MultiporterC.VariableNode was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MultiporterC.VariableNode);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Border)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MultiporterC.VariableNode) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IExplorer_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Explorer_obj19_Bindings

            public void SetDataRoot(global::MultiporterC.VariableNode newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MultiporterC.VariableNode obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_UF(obj.UF, phase);
                        this.Update_Unit_Exists(obj.Unit_Exists, phase);
                        this.Update_MF(obj.MF, phase);
                        this.Update_Measurement_Name(obj.Measurement_Name, phase);
                    }
                }
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj20, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj21, obj, null);
                }
            }
            private void Update_UF(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Foreground(this.obj20, obj, null);
                }
            }
            private void Update_Unit_Exists(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj20, obj);
                }
            }
            private void Update_MF(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Foreground(this.obj21, obj, null);
                }
            }
            private void Update_Measurement_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj22, obj, null);
                }
            }

            private class Explorer_obj19_BindingsTracking
            {
                global::System.WeakReference<Explorer_obj19_Bindings> WeakRefToBindingObj; 

                public Explorer_obj19_BindingsTracking(Explorer_obj19_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Explorer_obj19_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Explorer_obj19_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MultiporterC.VariableNode obj = sender as global::MultiporterC.VariableNode;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_UF(obj.UF, DATA_CHANGED);
                                    bindings.Update_Unit_Exists(obj.Unit_Exists, DATA_CHANGED);
                                    bindings.Update_MF(obj.MF, DATA_CHANGED);
                                    bindings.Update_Measurement_Name(obj.Measurement_Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "UF":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UF(obj.UF, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Unit_Exists":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Unit_Exists(obj.Unit_Exists, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MF":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MF(obj.MF, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Measurement_Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Measurement_Name(obj.Measurement_Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MultiporterC.VariableNode obj)
                {
                    Explorer_obj19_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class Explorer_obj25_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IExplorer_Bindings
        {
            private global::MultiporterC.ExperimentNode dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj26;
            private global::Windows.UI.Xaml.Controls.Button obj27;

            public Explorer_obj25_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 26:
                        this.obj26 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MultiporterC.ExperimentNode data = args.NewValue as global::MultiporterC.ExperimentNode;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MultiporterC.ExperimentNode was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MultiporterC.ExperimentNode);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Border)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MultiporterC.ExperimentNode) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
            }

            // IExplorer_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            // Explorer_obj25_Bindings

            public void SetDataRoot(global::MultiporterC.ExperimentNode newDataRoot)
            {
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MultiporterC.ExperimentNode obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj26, obj, null);
                }
            }
            private void Update_Description(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj27, obj, null);
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 7:
                {
                    global::Windows.UI.Xaml.Controls.Button element7 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 255 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element7).Click += this.Edit_Card_Click;
                    #line default
                }
                break;
            case 11:
                {
                    global::Windows.UI.Xaml.Controls.Button element11 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 202 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element11).Click += this.Choose_Subtype;
                    #line default
                }
                break;
            case 14:
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyoutItem element14 = (global::Windows.UI.Xaml.Controls.MenuFlyoutItem)(target);
                    #line 179 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.MenuFlyoutItem)element14).Click += this.Quant_Type_Click;
                    #line default
                }
                break;
            case 15:
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyoutItem element15 = (global::Windows.UI.Xaml.Controls.MenuFlyoutItem)(target);
                    #line 183 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.MenuFlyoutItem)element15).Click += this.Quant_Type_Click;
                    #line default
                }
                break;
            case 16:
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyoutItem element16 = (global::Windows.UI.Xaml.Controls.MenuFlyoutItem)(target);
                    #line 187 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.MenuFlyoutItem)element16).Click += this.Quant_Type_Click;
                    #line default
                }
                break;
            case 17:
                {
                    global::Windows.UI.Xaml.Controls.Button element17 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 146 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element17).Click += this.Description_Click;
                    #line default
                }
                break;
            case 18:
                {
                    global::Windows.UI.Xaml.Controls.Button element18 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 152 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element18).Click += this.Edit_Card_Click;
                    #line default
                }
                break;
            case 20:
                {
                    global::Windows.UI.Xaml.Controls.Button element20 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 114 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element20).Click += this.Choose_Unit;
                    #line default
                }
                break;
            case 21:
                {
                    global::Windows.UI.Xaml.Controls.Button element21 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 92 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element21).Click += this.Choose_Measurement;
                    #line default
                }
                break;
            case 23:
                {
                    global::Windows.UI.Xaml.Controls.Button element23 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 67 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element23).Click += this.Description_Click;
                    #line default
                }
                break;
            case 24:
                {
                    global::Windows.UI.Xaml.Controls.Button element24 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 73 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element24).Click += this.Edit_Card_Click;
                    #line default
                }
                break;
            case 27:
                {
                    global::Windows.UI.Xaml.Controls.Button element27 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 31 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element27).Click += this.Description_Click;
                    #line default
                }
                break;
            case 28:
                {
                    global::Windows.UI.Xaml.Controls.Button element28 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 37 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element28).Click += this.Edit_Card_Click;
                    #line default
                }
                break;
            case 29:
                {
                    this.MySplitView = (global::Windows.UI.Xaml.Controls.SplitView)(target);
                }
                break;
            case 30:
                {
                    this.NavPanel = (global::MultiporterC.NavControl)(target);
                }
                break;
            case 31:
                {
                    this.RootPivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 32:
                {
                    this.ConclusionsCards = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 33:
                {
                    global::Windows.UI.Xaml.Controls.Button element33 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 471 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element33).Click += this.New_Card_Click;
                    #line default
                }
                break;
            case 34:
                {
                    this.DataAnalysisCards = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 35:
                {
                    global::Windows.UI.Xaml.Controls.Button element35 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 452 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element35).Click += this.New_Card_Click;
                    #line default
                }
                break;
            case 36:
                {
                    this.ExperimentCards = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 37:
                {
                    global::Windows.UI.Xaml.Controls.Button element37 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 432 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element37).Click += this.New_Card_Click;
                    #line default
                }
                break;
            case 38:
                {
                    this.MaterialsCards = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 39:
                {
                    global::Windows.UI.Xaml.Controls.Button element39 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 413 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element39).Click += this.New_Card_Click;
                    #line default
                }
                break;
            case 40:
                {
                    this.HypothesisCards = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 41:
                {
                    global::Windows.UI.Xaml.Controls.Button element41 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 393 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element41).Click += this.New_Card_Click;
                    #line default
                }
                break;
            case 42:
                {
                    this.ProblemCards = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 43:
                {
                    global::Windows.UI.Xaml.Controls.Button element43 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 374 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element43).Click += this.New_Card_Click;
                    #line default
                }
                break;
            case 44:
                {
                    this.Export = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 328 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.Export).Click += this.Export_Click;
                    #line default
                }
                break;
            case 45:
                {
                    global::Windows.UI.Xaml.Controls.Button element45 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 336 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element45).Click += this.Experiment_Settings_Click;
                    #line default
                }
                break;
            case 46:
                {
                    global::Windows.UI.Xaml.Controls.Button element46 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 344 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element46).Click += this.GetConnectedDevices;
                    #line default
                }
                break;
            case 47:
                {
                    this.PlayExperimentButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 353 "..\..\..\Explorer.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.PlayExperimentButton).Click += this.Play_Click;
                    #line default
                }
                break;
            case 48:
                {
                    this.ExpName = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 49:
                {
                    this.ExperimentAuthor = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 50:
                {
                    this.ExperimentCreated = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Border element1 = (global::Windows.UI.Xaml.Controls.Border)target;
                    Explorer_obj1_Bindings bindings = new Explorer_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MultiporterC.DataChartNode) element1.DataContext);
                    element1.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element1, bindings);
                }
                break;
            case 8:
                {
                    global::Windows.UI.Xaml.Controls.Border element8 = (global::Windows.UI.Xaml.Controls.Border)target;
                    Explorer_obj8_Bindings bindings = new Explorer_obj8_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MultiporterC.QuantitativeRelationshipNode) element8.DataContext);
                    element8.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element8, bindings);
                }
                break;
            case 19:
                {
                    global::Windows.UI.Xaml.Controls.Border element19 = (global::Windows.UI.Xaml.Controls.Border)target;
                    Explorer_obj19_Bindings bindings = new Explorer_obj19_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MultiporterC.VariableNode) element19.DataContext);
                    element19.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element19, bindings);
                }
                break;
            case 25:
                {
                    global::Windows.UI.Xaml.Controls.Border element25 = (global::Windows.UI.Xaml.Controls.Border)target;
                    Explorer_obj25_Bindings bindings = new Explorer_obj25_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MultiporterC.ExperimentNode) element25.DataContext);
                    element25.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element25, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

